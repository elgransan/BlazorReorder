@typeparam TItem
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@inject IServiceProvider ServiceProvider
@inject NavigationManager nav
@inject IJSRuntime JS;
@implements IDisposable

@if(rs != null && rs.selected != null && rs.isDragging && elemPosition.x != -1000)
{
    <div class="reorder-item-dragging reorder-item" 
         style="width: @(elemWidth)px; left: @(elemPosition.x)px; top: @(elemPosition.y)px; transform: translateX(@(ghostTrans.x)px) translateY(@(ghostTrans.y)px )">
    @ChildContent(rs.selected)
    </div>
}

@if (rs != null && itemElem != null)
{
    <div class="reorder" @ref="reorder">
        @foreach (var item in Items.Select((v, i) => (v, i)))
        {
            <div @ref="itemElem[item.i]" @key="item.i" class="reorder-item @(rs.selected != null && (object)item.v == (object)rs.selected ? "reorder-item-active" : "")"
            @onmousedown="async (e) => await onPress(e, item.v, item.i)" @ontouchstart="async (e) => await onTouch(e, item.v, item.i)">
                @ChildContent(item.v)
            </div>
        }
    </div>
}

@code 
{
    [Parameter, EditorRequired] public RenderFragment<TItem> ChildContent { get; set; } = null!;
    [Parameter, EditorRequired] public List<TItem> Items { get; set; } = null!;
    [Parameter] public Func<TItem, TItem>? Copy { get; set; }
    [Parameter] public EventCallback<TItem> OnStart { get; set; }
    [Parameter] public EventCallback<TItem> OnChange { get; set; }
    [Parameter] public EventCallback<TItem> OnFinish { get; set; }
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public bool DisableDrop { get; set; } = false;
    [Parameter] public bool DisableDrag { get; set; } = false;
    [Parameter] public ReorderService<TItem>? ReorderService { get; set; }

    private bool shouldRender = true; // cancel re-rendering
    private DotNetObjectReference<Reorder<TItem>>? dotNetHelper; //js-interop 2-ways
    Dictionary<int, ElementReference> itemElem = new();
    ElementReference reorder;
    point elemPosition = new point(-1000, 0);
    clientRect? elemRect;
    point ghostTrans = new point(0, 0);
    point clickPosition = new point(0, 0);
    int elemWidth = 0;
    private IReorderService<TItem>? rs;

    protected override void OnInitialized()
    {
        nav.LocationChanged += HandleLocationChanged;
    }

    public void Dispose()
    {
        nav.LocationChanged -= HandleLocationChanged;
    }

    public void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (dotNetHelper == null || rs == null) return;
        base.InvokeAsync(async () =>
        {
            await rs.removeEvents(dotNetHelper);
            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // set if is using scoped service or page service
            var provider = ServiceProvider.GetService(typeof(IReorderService<TItem>));
            if (provider != null)
                rs = (IReorderService<TItem>)provider;
            if (rs == null && ReorderService != null) rs = ReorderService.InitService(JS);
            if (rs == null) throw new Exception("Blazor Reorder: Service not initialized");
            dotNetHelper = DotNetObjectReference.Create(this);
            await rs.initEvents(dotNetHelper);
            StateHasChanged();
        }
    }

    public async Task onPress(MouseEventArgs m, TItem item, int index)
    {
        await initDrag(item, index, m.PageX, m.PageY, m.ClientX, m.ClientY);
    }

    public async Task onTouch(TouchEventArgs m, TItem item, int index)
    {
        var p = m.TargetTouches.First();
        await initDrag(item, index, p.PageX, p.PageY, p.ClientX, p.ClientY);
    }

    private async Task initDrag(TItem item, int index, double pageX, double pageY, double clientX, double clientY)
    {
        if (Disabled || DisableDrag) return;
        if (itemElem == null || rs == null) return;

        shouldRender = false; // Because the method triggers re-render, the click propagation is canceled, if you have a link/or any click event inside it's going to stop working
        var ghostElem = itemElem[index];
        elemWidth = await rs.getWidth(ghostElem);
        elemPosition = await rs.getPosition(ghostElem);
        elemRect = await rs.getClientRect(ghostElem);
        
        clickPosition = await rs.getPoint(pageX, pageY, clientX, clientY);
        TItem? clone = Copy != null ? Copy(item) : default(TItem);
        rs.Set(Items, clone != null ? clone : item, index, clickPosition, clone != null);
        await OnStart.InvokeAsync(rs.selected);
    }

    [JSInvokable]
    public async Task onRelease(MouseEventArgs m)
    {
        if (rs == null) return;
        elemPosition = new point(-1000, 0);
        if (rs.isDragging && rs.originItems == Items)
        {
            await OnFinish.InvokeAsync(rs.selected);
            rs.Reset();
            shouldRender = true;
        }
        StateHasChanged();
    }

    [JSInvokable]
    public async Task onMove(point pos)
    {
        if (itemElem == null || rs == null || rs.originItems == null || rs.selected == null) return;
        if (rs.isDragging)
        {
            shouldRender = false;
            ghostTrans = new point(pos.x - rs.elemClickPosition.x, pos.y - rs.elemClickPosition.y);

            // check if current drag item is over another item and swap places 
            for (var i = 0; i < itemElem.Count; i++)
            {
                if (Disabled || DisableDrop) break;
                var subItem = itemElem[i];
                if (rs.originItems == Items && i == rs.elemIndex) continue;

                // If is on top of an element or if top top of a empty list -> confirm drag
                if (await isOnTop(subItem, pos) ||
                Items.Count == 0 && await isOnTop((ElementReference) reorder, pos))
                {
                    // reorder
                    if (!rs.isCopy())
                        rs.originItems.RemoveAt(rs.elemIndex);
                    Items.Insert(i, rs.selected);
                    rs.elemIndex = i;
                    if (rs.originItems != Items) rs.originItems = Items;
                    await OnChange.InvokeAsync(rs.selected);
                    break;
                }
            }

            shouldRender = true;
            StateHasChanged();
        }
    }

    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    // checks if mouse x/y is on top of an item 
    async Task<bool> isOnTop(ElementReference item, point pos)
    {
        if (rs == null) return false;
        var box = await rs.getClientRect(item);
        if (box.width < 0) return false;
        var isx = (pos.x > box.left && pos.x < (box.left + box.width));
        var isy = (pos.y > box.top && pos.y < (box.top + Math.Min(box.height, elemRect?.height ?? 100000)));
        var res = isx && isy;

        return res;
    }
}
